name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Run unit tests
        run: just test-verbose

      - name: Check flake
        run: just check

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Check for dead code
        run: just lint-check

      - name: Format check
        run: |
          # Run formatting and check if any files changed
          just fmt
          if ! git diff --exit-code; then
            echo "Files are not properly formatted. Run 'just fmt' locally and commit the changes."
            exit 1
          fi

  discover-nixos-hosts:
    name: Discover NixOS Hosts
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.discover.outputs.hosts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Discover NixOS hosts
        id: discover
        run: |
          if [ -d "hosts/nixos" ]; then
            hosts=$(find hosts/nixos/ -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          else
            hosts="[]"
          fi
          echo "hosts=$hosts" >> $GITHUB_OUTPUT
          echo "Discovered NixOS hosts: $hosts"

  build-nixos:
    name: Build NixOS Configurations
    runs-on: ubuntu-latest
    needs: discover-nixos-hosts
    if: needs.discover-nixos-hosts.outputs.hosts != '[]'
    strategy:
      matrix:
        host: ${{ fromJson(needs.discover-nixos-hosts.outputs.hosts) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Build ${{ matrix.host }}
        run: just build ${{ matrix.host }}

  discover-darwin-hosts:
    name: Discover Darwin Hosts
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.discover.outputs.hosts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Discover Darwin hosts
        id: discover
        run: |
          if [ -d "hosts/darwin" ]; then
            hosts=$(find hosts/darwin/ -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          else
            hosts="[]"
          fi
          echo "hosts=$hosts" >> $GITHUB_OUTPUT
          echo "Discovered Darwin hosts: $hosts"

  build-darwin:
    name: Build Darwin Configurations
    runs-on: macos-latest
    needs: discover-darwin-hosts
    if: needs.discover-darwin-hosts.outputs.hosts != '[]'
    strategy:
      matrix:
        host: ${{ fromJson(needs.discover-darwin-hosts.outputs.hosts) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Build ${{ matrix.host }}
        run: just build ${{ matrix.host }}

  property-tests:
    name: Property-Based Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Run property-based tests
        run: just test-properties

  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Run cross-platform tests
        run: just test-platform-compatibility

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Run performance tests
        run: just test-performance

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Run integration tests
        run: just test-integration

  scenario-tests:
    name: Real-World Scenario Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Run scenario tests
        run: just test-scenarios

  comprehensive-test:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [test, lint, property-tests, cross-platform-tests, performance-tests, integration-tests, scenario-tests]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Run comprehensive test suite
        run: just test-comprehensive

      - name: Check test results
        run: |
          echo "Test Results Summary:"
          echo "Basic Tests: ${{ needs.test.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Property Tests: ${{ needs.property-tests.result }}"
          echo "Cross-Platform Tests: ${{ needs.cross-platform-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Scenario Tests: ${{ needs.scenario-tests.result }}"