name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Run unit tests
        run: just test-verbose

      - name: Check flake
        run: just check

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Check for dead code
        run: just lint-check

      - name: Format check
        run: |
          # Run formatting and check if any files changed
          just fmt
          if ! git diff --exit-code; then
            echo "Files are not properly formatted. Run 'just fmt' locally and commit the changes."
            exit 1
          fi

  discover-nixos-hosts:
    name: Discover NixOS Hosts
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.discover.outputs.hosts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Discover NixOS hosts
        id: discover
        run: |
          if [ -d "hosts/nixos" ]; then
            hosts=$(find hosts/nixos/ -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          else
            hosts="[]"
          fi
          echo "hosts=$hosts" >> $GITHUB_OUTPUT
          echo "Discovered NixOS hosts: $hosts"

  build-nixos:
    name: Build NixOS Configurations
    runs-on: ubuntu-latest
    needs: discover-nixos-hosts
    if: needs.discover-nixos-hosts.outputs.hosts != '[]'
    strategy:
      matrix:
        host: ${{ fromJson(needs.discover-nixos-hosts.outputs.hosts) }}
      max-parallel: 1  # Build one at a time to avoid disk space issues
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Build ${{ matrix.host }}
        run: just build ${{ matrix.host }}

      - name: Cleanup build artifacts
        run: nix store gc --option keep-outputs false || true

  discover-darwin-hosts:
    name: Discover Darwin Hosts
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.discover.outputs.hosts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Discover Darwin hosts
        id: discover
        run: |
          if [ -d "hosts/darwin" ]; then
            hosts=$(find hosts/darwin/ -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          else
            hosts="[]"
          fi
          echo "hosts=$hosts" >> $GITHUB_OUTPUT
          echo "Discovered Darwin hosts: $hosts"

  build-darwin:
    name: Build Darwin Configurations
    runs-on: macos-15
    needs: discover-darwin-hosts
    if: needs.discover-darwin-hosts.outputs.hosts != '[]'
    strategy:
      matrix:
        host: ${{ fromJson(needs.discover-darwin-hosts.outputs.hosts) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install just
        run: nix profile install nixpkgs#just

      - name: Build ${{ matrix.host }}
        run: just build ${{ matrix.host }}

