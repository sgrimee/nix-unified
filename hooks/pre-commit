#!/usr/bin/env bash

# Pre-commit hook to run various checks before allowing commits
# This helps maintain code quality and prevents secrets from being committed

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

print_status "$BLUE" "üîç Pre-commit hook running..."

# Check for secrets with gitleaks
print_status "$BLUE" "üîê Scanning for secrets..."
if ! nix run nixpkgs#gitleaks -- detect --source . --config .gitleaks.toml --redact --verbose; then
    print_status "$RED" "‚ùå Secrets detected! Commit blocked."
    print_status "$RED" "   Review the output above and remove any secrets."
    print_status "$RED" "   If this is a false positive, add to .gitleaks.toml"
    exit 1
fi

# Check for large files (> 1MB)
print_status "$BLUE" "üìè Checking for large files..."
large_files=$(git diff --cached --name-only --diff-filter=A | xargs -I {} find {} -size +1M 2>/dev/null || true)
if [ -n "$large_files" ]; then
    print_status "$YELLOW" "‚ö†Ô∏è  Large files detected:"
    echo "$large_files"
    print_status "$YELLOW" "   Consider using Git LFS or excluding from repository"
fi

# Format Nix files if they exist in the commit
nix_files=$(git diff --cached --name-only --diff-filter=AM | grep "\.nix$" || true)
if [ -n "$nix_files" ]; then
    print_status "$BLUE" "üé® Formatting Nix files..."
    echo "$nix_files" | xargs nix run nixpkgs#nixfmt-classic --
    
    # Add formatted files back to staging
    echo "$nix_files" | xargs git add
    
    if [ -n "$(git diff --cached --name-only)" ]; then
        print_status "$GREEN" "‚úÖ Nix files formatted and re-staged"
    fi
fi

# Quick syntax check for staged Nix files
if [ -n "$nix_files" ]; then
    print_status "$BLUE" "üîç Checking Nix syntax..."
    for file in $nix_files; do
        if ! nix-instantiate --parse "$file" >/dev/null 2>&1; then
            print_status "$RED" "‚ùå Syntax error in $file"
            exit 1
        fi
    done
fi

# Validate secret files
secret_files=$(git diff --cached --name-only --diff-filter=AM | grep "secrets/.*\.yaml$" || true)
if [ -n "$secret_files" ]; then
    print_status "$BLUE" "üîê Validating secret files..."
    for file in $secret_files; do
        if [ -f "$file" ]; then
            # Check if file is properly encrypted (contains 'ENC[' marker)
            if ! grep -q "ENC\[" "$file"; then
                print_status "$RED" "‚ùå Secret file $file is not encrypted!"
                print_status "$RED" "   Use 'sops --encrypt --in-place $file' to encrypt it"
                exit 1
            fi
            
            # Try to decrypt to validate format
            if ! sops decrypt "$file" >/dev/null 2>&1; then
                print_status "$RED" "‚ùå Cannot decrypt secret file $file"
                print_status "$RED" "   File may be corrupted or you lack decryption keys"
                exit 1
            fi
            
            print_status "$GREEN" "‚úÖ Secret file $file is valid"
        fi
    done
fi

# Check for common patterns that shouldn't be committed
print_status "$BLUE" "üîç Checking for problematic patterns..."
problematic_patterns=(
    "TODO.*FIXME"
    "console\.log"
    "debugger"
    "pdb\.set_trace"
    "import pdb"
    "\.only\("
    "\.skip\("
)

for pattern in "${problematic_patterns[@]}"; do
    if git diff --cached | grep -qE "$pattern"; then
        print_status "$YELLOW" "‚ö†Ô∏è  Found potentially problematic pattern: $pattern"
        print_status "$YELLOW" "   Review your changes before committing"
    fi
done

print_status "$GREEN" "‚úÖ Pre-commit checks passed!"